import gymnasium as gym
import numpy as np
import pygame
import mido

# Definir el entorno de música
class MusicEnv(gym.Env):
    def __init__(self):
        super(MusicEnv, self).__init__()
        self.action_space = gym.spaces.Discrete(12)  # 12 notas en una octava
        self.observation_space = gym.spaces.Box(low=0, high=1, shape=(12,), dtype=np.float32)
        self.melody = []
        self.max_steps = 16
        self.current_step = 0

    def reset(self):
        self.melody = []
        self.current_step = 0
        return np.zeros(12), {}

    def step(self, action):
        self.melody.append(action)
        self.current_step += 1
        
        obs = np.zeros(12)
        obs[action] = 1
        
        reward = self._calculate_reward()
        done = self.current_step >= self.max_steps
        
        return obs, reward, done, False, {}

    def _calculate_reward(self):
        if len(self.melody) < 2:
            return 0
        
        # Recompensa intervalos consonantes
        last_interval = abs(self.melody[-1] - self.melody[-2])
        if last_interval in [0, 3, 4, 5, 7]:  # Unísono, tercera, cuarta, quinta
            return 1
        elif last_interval in [2, 9, 10]:  # Segunda, séptima
            return -0.5
        else:
            return 0

    def render(self):
        if not hasattr(self, 'midi_file'):
            self.midi_file = mido.MidiFile()
            self.track = mido.MidiTrack()
            self.midi_file.tracks.append(self.track)
        
        for note in self.melody:
            self.track.append(mido.Message('note_on', note=60+note, velocity=64, time=0))
            self.track.append(mido.Message('note_off', note=60+note, velocity=64, time=480))
        
        self.midi_file.save('melody.mid')
        print("Melody saved as 'melody.mid'")

# Entrenamiento simple
env = MusicEnv()

for episode in range(10):
    obs, _ = env.reset()
    done = False
    total_reward = 0
    
    while not done:
        action = env.action_space.sample()  # Acción aleatoria por simplicidad
        obs, reward, done, _, _ = env.step(action)
        total_reward += reward
    
    print(f"Episode {episode + 1}, Total Reward: {total_reward}")

env.render()
